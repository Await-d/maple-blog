name: Auto Release Pipeline

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: write
  packages: write

jobs:
  release-pipeline:
    runs-on: ubuntu-latest
    # Skip commits created by GitHub Actions to avoid loops
    if: github.event.pusher.name != 'github-actions[bot]' && !contains(github.event.head_commit.message, '[skip ci]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if version bump is needed
        id: check_changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git tag --sort=-version:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found, creating initial version"
            echo "needs_version_bump=true" >> $GITHUB_OUTPUT
          else
            # Check if there are significant changes since last tag
            CHANGES=$(git diff --name-only $LATEST_TAG..HEAD | grep -E '\.(cs|csproj|json|js|jsx|ts|tsx|yml|yaml|dockerfile|md)$' | wc -l)
            if [ $CHANGES -gt 0 ]; then
              echo "Found $CHANGES significant changes, version bump needed"
              echo "needs_version_bump=true" >> $GITHUB_OUTPUT
            else
              echo "No significant changes found, skipping version bump"
              echo "needs_version_bump=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get current version
        id: get_version
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.0"
          fi
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: calc_version
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          CURRENT="${{ steps.get_version.outputs.current_version }}"

          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          # Get the base for comparison
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, get all commits
            COMMIT_MESSAGES=$(git log --pretty=format:"%s" HEAD)
          else
            # Compare from latest tag to HEAD
            COMMIT_MESSAGES=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          fi

          if echo "$COMMIT_MESSAGES" | grep -qE "^(feat|feature)(\(.+\))?!:|^[^:]+!:|BREAKING CHANGE"; then
            # Major version bump for breaking changes
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MESSAGES" | grep -qE "^(feat|feature)(\(.+\))?:"; then
            # Minor version bump for new features
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            # Patch version bump for fixes and other changes
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update VERSION file
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          echo "${{ steps.calc_version.outputs.new_version }}" > VERSION
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git commit -m "chore: bump version to ${{ steps.calc_version.outputs.new_version }} [skip ci]"

      - name: Set up .NET 10
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'
          dotnet-quality: 'preview'

      - name: Build backend
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          cd backend
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet publish src/MapleBlog.API/MapleBlog.API.csproj -c Release -o ../publish
          echo "Backend build completed"

      - name: Set up Node.js
        if: steps.check_changes.outputs.needs_version_bump == 'true' && hashFiles('frontend/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Build frontend
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
            cd frontend
            # Use legacy peer deps for React 19 compatibility
            npm ci --legacy-peer-deps
            npm run build
            echo "Frontend build completed"
            # Copy frontend build to backend wwwroot
            rm -rf ../backend/src/MapleBlog.API/wwwroot
            cp -r dist ../backend/src/MapleBlog.API/wwwroot
            echo "Frontend assets copied to wwwroot"
          else
            echo "No frontend directory found, skipping frontend build"
          fi

      - name: Install git-cliff for changelog
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          # Get the latest version dynamically
          CLIFF_VERSION=$(curl -s https://api.github.com/repos/orhun/git-cliff/releases/latest | grep '"tag_name":' | sed -E 's/.*"v?([^"]+)".*/\1/')
          echo "Installing git-cliff version: $CLIFF_VERSION"
          curl -L "https://github.com/orhun/git-cliff/releases/download/v${CLIFF_VERSION}/git-cliff-${CLIFF_VERSION}-x86_64-unknown-linux-gnu.tar.gz" | tar xzf -
          sudo mv "git-cliff-${CLIFF_VERSION}/git-cliff" /usr/local/bin/
          git-cliff --version

      - name: Generate changelog
        id: changelog
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          # Create a basic cliff.toml if it doesn't exist
          if [ ! -f cliff.toml ]; then
            cat > cliff.toml << 'EOF'
          [changelog]
          header = """
          # Changelog
          All notable changes to Maple Blog will be documented in this file.
          """
          body = """
          {% for group, commits in commits | group_by(attribute="group") %}
          ## {{ group | upper_first }}
          {% for commit in commits %}
          - {{ commit.message | upper_first }} ({{ commit.id | truncate(length=7, end="") }})
          {% endfor %}
          {% endfor %}
          """
          trim = true

          [git]
          conventional_commits = true
          filter_unconventional = false
          split_commits = false
          commit_preprocessors = []
          commit_parsers = [
              { message = "^feat", group = "Features" },
              { message = "^fix", group = "Bug Fixes" },
              { message = "^doc", group = "Documentation" },
              { message = "^perf", group = "Performance" },
              { message = "^refactor", group = "Refactor" },
              { message = "^style", group = "Styling" },
              { message = "^test", group = "Testing" },
              { message = "^chore", group = "Miscellaneous Tasks" },
              { body = ".*security", group = "Security" },
          ]
          protect_breaking_commits = false
          filter_commits = false
          tag_pattern = "v[0-9]*"
          skip_tags = "v0.1.0-beta.1"
          ignore_tags = ""
          topo_order = false
          sort_commits = "oldest"
          EOF
          fi

          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # No tags exist, generate changelog for all commits
            CHANGELOG=$(git-cliff --unreleased --strip header 2>/dev/null || echo "Initial release")
          else
            CHANGELOG=$(git-cliff --latest --strip header 2>/dev/null || echo "See commit history for changes")
          fi

          # Save changelog to file and output
          echo "$CHANGELOG" > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          git tag "v${{ steps.calc_version.outputs.new_version }}"
          git push origin "v${{ steps.calc_version.outputs.new_version }}"
          git push origin ${{ github.ref_name }}

      - name: Create GitHub Release
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.calc_version.outputs.new_version }}"
          release_name: "Release v${{ steps.calc_version.outputs.new_version }}"
          body: |
            ## Changes in v${{ steps.calc_version.outputs.new_version }}

            ${{ steps.changelog.outputs.changelog }}

            ## Docker Images

            ### Backend API
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-backend:v${{ steps.calc_version.outputs.new_version }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-backend:latest
            ```

            ### Frontend
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-frontend:v${{ steps.calc_version.outputs.new_version }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-frontend:latest
            ```

            ### Admin Panel
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-admin:v${{ steps.calc_version.outputs.new_version }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-admin:latest
            ```

            ## Quick Start
            ```bash
            git clone https://github.com/Await-d/maple-blog.git
            cd maple-blog
            docker-compose up -d
            ```
          draft: false
          prerelease: false

      - name: Clean up old tags (keep last 10)
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        run: |
          # Get all tags sorted by version, skip the first 10 (most recent)
          OLD_TAGS=$(git tag --sort=-version:refname | tail -n +11)

          if [ ! -z "$OLD_TAGS" ]; then
            echo "Cleaning up old tags: $OLD_TAGS"
            for tag in $OLD_TAGS; do
              git tag -d $tag
              git push origin --delete $tag || true
            done
          else
            echo "No old tags to clean up"
          fi

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.check_changes.outputs.needs_version_bump == 'true' && env.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta_backend
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-backend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=v${{ steps.calc_version.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.calc_version.outputs.new_version }}
            type=semver,pattern={{major}},value=v${{ steps.calc_version.outputs.new_version }}
            type=raw,value=latest

      - name: Build and push Backend Docker image
        if: steps.check_changes.outputs.needs_version_bump == 'true' && env.DOCKERHUB_TOKEN != ''
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.calc_version.outputs.new_version }}
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Backend Docker image (no push)
        if: steps.check_changes.outputs.needs_version_bump == 'true' && env.DOCKERHUB_TOKEN == ''
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: false
          tags: maple-blog-backend:v${{ steps.calc_version.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.calc_version.outputs.new_version }}
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for frontend
        id: meta_frontend
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-frontend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},value=v${{ steps.calc_version.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.calc_version.outputs.new_version }}
            type=semver,pattern={{major}},value=v${{ steps.calc_version.outputs.new_version }}
            type=raw,value=latest

      - name: Build and push Frontend Docker image
        if: steps.check_changes.outputs.needs_version_bump == 'true' && hashFiles('frontend/package.json') != '' && env.DOCKERHUB_TOKEN != ''
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./docker/frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.calc_version.outputs.new_version }}

      - name: Build and push Admin Docker image
        if: steps.check_changes.outputs.needs_version_bump == 'true' && hashFiles('docker-compose.admin.yml') != '' && env.DOCKERHUB_TOKEN != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker-compose.admin.yml
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-admin:v${{ steps.calc_version.outputs.new_version }}
            ${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-admin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Send Telegram notification
        if: steps.check_changes.outputs.needs_version_bump == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d parse_mode=Markdown \
            -d text="🚀 *Maple Blog v${{ steps.calc_version.outputs.new_version }} Released!*

          📦 **Docker Images:**
          - Backend: \`${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-backend:v${{ steps.calc_version.outputs.new_version }}\`
          - Frontend: \`${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-frontend:v${{ steps.calc_version.outputs.new_version }}\`
          - Admin: \`${{ secrets.DOCKERHUB_USERNAME || 'await2719' }}/maple-blog-admin:v${{ steps.calc_version.outputs.new_version }}\`

          🔗 **Release:** [GitHub Release](https://github.com/Await-d/maple-blog/releases/tag/v${{ steps.calc_version.outputs.new_version }})

          ⚡ **Changes:**
          ${{ steps.changelog.outputs.changelog }}"
          else
            echo "Telegram notification skipped (bot token or chat ID not configured)"
          fi