/**
 * HeaderÁªÑ‰ª∂ÊµãËØï
 * ÊµãËØïÁΩëÁ´ôÂ§¥ÈÉ®ÂØºËà™ÁöÑÊ∏≤Êüì„ÄÅ‰∫§‰∫íÂíåÂìçÂ∫îÂºèË°å‰∏∫
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter } from 'react-router-dom';
import Header from '../Header';

// Mock hooks
vi.mock('../../../hooks/useResponsive', () => ({
  useResponsive: vi.fn(() => ({
    isMobile: false,
    isTablet: false,
    isDesktop: true,
    viewportWidth: 1200,
    breakpoint: 'lg',
    isTouchDevice: false
  }))
}));

vi.mock('../../../hooks/useAuth', () => ({
  useAuth: vi.fn(() => ({
    user: null,
    isAuthenticated: false,
    login: vi.fn(),
    logout: vi.fn(),
    loading: false
  }))
}));

// Mock stores
vi.mock('../../../stores/homeStore', () => ({
  useHomeStore: vi.fn(() => ({
    theme: 'light',
    setTheme: vi.fn(),
    searchQuery: '',
    setSearchQuery: vi.fn(),
    showSearch: false,
    setShowSearch: vi.fn()
  }))
}));

// Mock components
vi.mock('../Navigation', () => ({
  default: ({ mobile = false }) => (
    <div data-testid={mobile ? 'mobile-navigation' : 'desktop-navigation'}>
      <a href="/blog">ÂçöÂÆ¢</a>
      <a href="/categories">ÂàÜÁ±ª</a>
      <a href="/archive">ÂΩíÊ°£</a>
      <a href="/about">ÂÖ≥‰∫é</a>
    </div>
  )
}));

vi.mock('../../home/SearchBox', () => ({
  default: ({ onSearch, placeholder, className }) => (
    <div data-testid="search-box" className={className}>
      <input
        type="text"
        placeholder={placeholder || 'ÊêúÁ¥¢ÊñáÁ´†...'}
        onChange={(e) => onSearch?.(e.target.value)}
        aria-label="ÊêúÁ¥¢"
      />
    </div>
  )
}));

vi.mock('../../home/ThemeToggle', () => ({
  default: ({ size = 'md', className }) => (
    <button
      data-testid="theme-toggle"
      className={className}
      aria-label="ÂàáÊç¢‰∏ªÈ¢ò"
    >
      {size === 'sm' ? 'üåô' : 'üåû'}
    </button>
  )
}));

// ÊµãËØïÂ∑•ÂÖ∑
const createTestQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: { retry: false },
    mutations: { retry: false },
  },
});

const renderWithProviders = (ui: React.ReactElement) => {
  const queryClient = createTestQueryClient();
  return render(
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        {ui}
      </BrowserRouter>
    </QueryClientProvider>
  );
};

// MockÁî®Êà∑Êï∞ÊçÆ
const mockUser = {
  id: '1',
  username: 'testuser',
  email: 'test@example.com',
  name: 'ÊµãËØïÁî®Êà∑',
  avatar: '/avatars/test.jpg',
  role: 'user' as const
};

const mockAdminUser = {
  ...mockUser,
  id: '2',
  username: 'admin',
  name: 'ÁÆ°ÁêÜÂëò',
  role: 'admin' as const
};

describe('Header', () => {
  let mockUseResponsive: ReturnType<typeof vi.fn>;
  let mockUseAuth: ReturnType<typeof vi.fn>;
  let mockUseHomeStore: ReturnType<typeof vi.fn>;

  beforeEach(() => {
    mockUseResponsive = vi.fn(() => ({
      isMobile: false,
      isTablet: false,
      isDesktop: true,
      viewportWidth: 1200,
      breakpoint: 'lg',
      isTouchDevice: false
    }));

    mockUseAuth = vi.fn(() => ({
      user: null,
      isAuthenticated: false,
      login: vi.fn(),
      logout: vi.fn(),
      loading: false
    }));

    mockUseHomeStore = vi.fn(() => ({
      theme: 'light',
      setTheme: vi.fn(),
      searchQuery: '',
      setSearchQuery: vi.fn(),
      showSearch: false,
      setShowSearch: vi.fn()
    }));

    vi.doMock('../../../hooks/useResponsive', () => ({
      useResponsive: mockUseResponsive
    }));

    vi.doMock('../../../hooks/useAuth', () => ({
      useAuth: mockUseAuth
    }));

    vi.doMock('../../../stores/homeStore', () => ({
      useHomeStore: mockUseHomeStore
    }));
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  describe('Âü∫Á°ÄÊ∏≤Êüì', () => {
    it('Â∫îËØ•Ê∏≤ÊüìÁΩëÁ´ôLogo', () => {
      renderWithProviders(<Header />);

      const logo = screen.getByRole('link', { name: /Maple Blog/i });
      expect(logo).toBeInTheDocument();
      expect(logo).toHaveAttribute('href', '/');
    });

    it('Â∫îËØ•Ê∏≤ÊüìÊ°åÈù¢Á´ØÂØºËà™ËèúÂçï', () => {
      renderWithProviders(<Header />);

      expect(screen.getByTestId('desktop-navigation')).toBeInTheDocument();
      expect(screen.getByRole('link', { name: /ÂçöÂÆ¢/i })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: /ÂàÜÁ±ª/i })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: /ÂΩíÊ°£/i })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: /ÂÖ≥‰∫é/i })).toBeInTheDocument();
    });

    it('Â∫îËØ•Ê∏≤ÊüìÊêúÁ¥¢Ê°Ü', () => {
      renderWithProviders(<Header />);

      expect(screen.getByTestId('search-box')).toBeInTheDocument();
      expect(screen.getByLabelText('ÊêúÁ¥¢')).toBeInTheDocument();
    });

    it('Â∫îËØ•Ê∏≤Êüì‰∏ªÈ¢òÂàáÊç¢ÊåâÈíÆ', () => {
      renderWithProviders(<Header />);

      expect(screen.getByTestId('theme-toggle')).toBeInTheDocument();
      expect(screen.getByLabelText('ÂàáÊç¢‰∏ªÈ¢ò')).toBeInTheDocument();
    });

    it('Â∫îËØ•Âú®Êú™ÁôªÂΩïÊó∂ÊòæÁ§∫ÁôªÂΩïÊåâÈíÆ', () => {
      renderWithProviders(<Header />);

      expect(screen.getByRole('link', { name: /ÁôªÂΩï/i })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: /Ê≥®ÂÜå/i })).toBeInTheDocument();
    });
  });

  describe('Áî®Êà∑ËÆ§ËØÅÁä∂ÊÄÅ', () => {
    it('Â∫îËØ•Âú®ÁôªÂΩïÂêéÊòæÁ§∫Áî®Êà∑ËèúÂçï', () => {
      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      expect(screen.getByRole('button', { name: /Áî®Êà∑ËèúÂçï/i })).toBeInTheDocument();
      expect(screen.queryByRole('link', { name: /ÁôªÂΩï/i })).not.toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Áî®Êà∑Â§¥ÂÉèÂíåÂêçÁß∞', () => {
      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      expect(screen.getByAltText('ÊµãËØïÁî®Êà∑')).toBeInTheDocument();
      expect(screen.getByText('ÊµãËØïÁî®Êà∑')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÁî®Êà∑ËèúÂçïÂ±ïÂºÄÂíåÊî∂Ëµ∑', async () => {
      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      const userMenuButton = screen.getByRole('button', { name: /Áî®Êà∑ËèúÂçï/i });

      // ÁÇπÂáªÂ±ïÂºÄËèúÂçï
      fireEvent.click(userMenuButton);

      await waitFor(() => {
        expect(screen.getByRole('menu')).toBeInTheDocument();
        expect(screen.getByRole('menuitem', { name: /‰∏™‰∫∫ËµÑÊñô/i })).toBeInTheDocument();
        expect(screen.getByRole('menuitem', { name: /ËÆæÁΩÆ/i })).toBeInTheDocument();
        expect(screen.getByRole('menuitem', { name: /ÈÄÄÂá∫ÁôªÂΩï/i })).toBeInTheDocument();
      });

      // ÁÇπÂáªÊî∂Ëµ∑ËèúÂçï
      fireEvent.click(userMenuButton);

      await waitFor(() => {
        expect(screen.queryByRole('menu')).not.toBeInTheDocument();
      });
    });

    it('Â∫îËØ•‰∏∫ÁÆ°ÁêÜÂëòÁî®Êà∑ÊòæÁ§∫ÁÆ°ÁêÜËèúÂçï', () => {
      mockUseAuth.mockReturnValue({
        user: mockAdminUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      const userMenuButton = screen.getByRole('button', { name: /Áî®Êà∑ËèúÂçï/i });
      fireEvent.click(userMenuButton);

      expect(screen.getByRole('menuitem', { name: /ÁÆ°ÁêÜÂêéÂè∞/i })).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÈÄÄÂá∫ÁôªÂΩï', async () => {
      const mockLogout = vi.fn();

      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: mockLogout,
        loading: false
      });

      renderWithProviders(<Header />);

      const userMenuButton = screen.getByRole('button', { name: /Áî®Êà∑ËèúÂçï/i });
      fireEvent.click(userMenuButton);

      const logoutButton = screen.getByRole('menuitem', { name: /ÈÄÄÂá∫ÁôªÂΩï/i });
      fireEvent.click(logoutButton);

      expect(mockLogout).toHaveBeenCalled();
    });
  });

  describe('ÊêúÁ¥¢ÂäüËÉΩ', () => {
    it('Â∫îËØ•ÊîØÊåÅÊêúÁ¥¢ËæìÂÖ•', () => {
      const mockSetSearchQuery = vi.fn();

      mockUseHomeStore.mockReturnValue({
        theme: 'light',
        setTheme: vi.fn(),
        searchQuery: '',
        setSearchQuery: mockSetSearchQuery,
        showSearch: false,
        setShowSearch: vi.fn()
      });

      renderWithProviders(<Header />);

      const searchInput = screen.getByLabelText('ÊêúÁ¥¢');
      fireEvent.change(searchInput, { target: { value: 'React' } });

      // È™åËØÅÊêúÁ¥¢ÂõûË∞ÉË¢´Ë∞ÉÁî®
      expect(mockSetSearchQuery).toHaveBeenCalledWith('React');
    });

    it('Â∫îËØ•ÊîØÊåÅÁßªÂä®Á´ØÊêúÁ¥¢ÂàáÊç¢', () => {
      const mockSetShowSearch = vi.fn();

      mockUseResponsive.mockReturnValue({
        isMobile: true,
        isTablet: false,
        isDesktop: false,
        viewportWidth: 375,
        breakpoint: 'sm',
        isTouchDevice: true
      });

      mockUseHomeStore.mockReturnValue({
        theme: 'light',
        setTheme: vi.fn(),
        searchQuery: '',
        setSearchQuery: vi.fn(),
        showSearch: false,
        setShowSearch: mockSetShowSearch
      });

      renderWithProviders(<Header />);

      const searchToggle = screen.getByRole('button', { name: /ÊêúÁ¥¢/i });
      fireEvent.click(searchToggle);

      expect(mockSetShowSearch).toHaveBeenCalledWith(true);
    });

    it('Â∫îËØ•Âú®ÁßªÂä®Á´ØÊòæÁ§∫ÂÖ®Â±èÊêúÁ¥¢Ë¶ÜÁõñÂ±Ç', () => {
      mockUseResponsive.mockReturnValue({
        isMobile: true,
        isTablet: false,
        isDesktop: false,
        viewportWidth: 375,
        breakpoint: 'sm',
        isTouchDevice: true
      });

      mockUseHomeStore.mockReturnValue({
        theme: 'light',
        setTheme: vi.fn(),
        searchQuery: '',
        setSearchQuery: vi.fn(),
        showSearch: true,
        setShowSearch: vi.fn()
      });

      renderWithProviders(<Header />);

      expect(screen.getByTestId('search-overlay')).toBeInTheDocument();
    });
  });

  describe('‰∏ªÈ¢òÂàáÊç¢', () => {
    it('Â∫îËØ•ÊîØÊåÅ‰∏ªÈ¢òÂàáÊç¢', () => {
      const mockSetTheme = vi.fn();

      mockUseHomeStore.mockReturnValue({
        theme: 'light',
        setTheme: mockSetTheme,
        searchQuery: '',
        setSearchQuery: vi.fn(),
        showSearch: false,
        setShowSearch: vi.fn()
      });

      renderWithProviders(<Header />);

      const themeToggle = screen.getByTestId('theme-toggle');
      fireEvent.click(themeToggle);

      expect(mockSetTheme).toHaveBeenCalledWith('dark');
    });

    it('Â∫îËØ•ÊòæÁ§∫ÂΩìÂâç‰∏ªÈ¢òÁä∂ÊÄÅ', () => {
      mockUseHomeStore.mockReturnValue({
        theme: 'dark',
        setTheme: vi.fn(),
        searchQuery: '',
        setSearchQuery: vi.fn(),
        showSearch: false,
        setShowSearch: vi.fn()
      });

      renderWithProviders(<Header />);

      const themeToggle = screen.getByTestId('theme-toggle');
      expect(themeToggle).toHaveTextContent('üåô'); // ÊöóËâ≤‰∏ªÈ¢òÂõæÊ†á
    });
  });

  describe('ÂìçÂ∫îÂºèË°å‰∏∫', () => {
    it('Â∫îËØ•Âú®ÁßªÂä®Á´ØÊòæÁ§∫Ê±âÂ†°ËèúÂçï', () => {
      mockUseResponsive.mockReturnValue({
        isMobile: true,
        isTablet: false,
        isDesktop: false,
        viewportWidth: 375,
        breakpoint: 'sm',
        isTouchDevice: true
      });

      renderWithProviders(<Header />);

      expect(screen.getByRole('button', { name: /ÊâìÂºÄËèúÂçï/i })).toBeInTheDocument();
      expect(screen.queryByTestId('desktop-navigation')).not.toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÁßªÂä®Á´ØËèúÂçïÂ±ïÂºÄÂíåÊî∂Ëµ∑', async () => {
      mockUseResponsive.mockReturnValue({
        isMobile: true,
        isTablet: false,
        isDesktop: false,
        viewportWidth: 375,
        breakpoint: 'sm',
        isTouchDevice: true
      });

      renderWithProviders(<Header />);

      const menuButton = screen.getByRole('button', { name: /ÊâìÂºÄËèúÂçï/i });

      // Â±ïÂºÄËèúÂçï
      fireEvent.click(menuButton);

      await waitFor(() => {
        expect(screen.getByTestId('mobile-navigation')).toBeInTheDocument();
        expect(screen.getByRole('button', { name: /ÂÖ≥Èó≠ËèúÂçï/i })).toBeInTheDocument();
      });

      // Êî∂Ëµ∑ËèúÂçï
      const closeButton = screen.getByRole('button', { name: /ÂÖ≥Èó≠ËèúÂçï/i });
      fireEvent.click(closeButton);

      await waitFor(() => {
        expect(screen.queryByTestId('mobile-navigation')).not.toBeInTheDocument();
        expect(screen.getByRole('button', { name: /ÊâìÂºÄËèúÂçï/i })).toBeInTheDocument();
      });
    });

    it('Â∫îËØ•Âú®Âπ≥ÊùøÁ´ØË∞ÉÊï¥Â∏ÉÂ±Ä', () => {
      mockUseResponsive.mockReturnValue({
        isMobile: false,
        isTablet: true,
        isDesktop: false,
        viewportWidth: 768,
        breakpoint: 'md',
        isTouchDevice: true
      });

      renderWithProviders(<Header />);

      const header = screen.getByRole('banner');
      expect(header).toHaveClass('px-6'); // Âπ≥ÊùøÁ´ØÈó¥Ë∑ù
    });

    it('Â∫îËØ•Âú®Â∞èÂ±èÂπï‰∏äÈöêËóèÈÉ®ÂàÜÂØºËà™È°π', () => {
      mockUseResponsive.mockReturnValue({
        isMobile: false,
        isTablet: true,
        isDesktop: false,
        viewportWidth: 768,
        breakpoint: 'md',
        isTouchDevice: true
      });

      renderWithProviders(<Header />);

      // Âπ≥ÊùøÁ´ØÂèØËÉΩÈöêËóèÊüê‰∫õÊ¨°Ë¶ÅÂØºËà™È°π
      expect(screen.queryByRole('link', { name: /ÂÖ≥‰∫é/i })).not.toBeInTheDocument();
    });
  });

  describe('ÊªöÂä®Ë°å‰∏∫', () => {
    it('Â∫îËØ•Âú®ÊªöÂä®Êó∂ÊîπÂèòÂ§¥ÈÉ®Ê†∑Âºè', async () => {
      renderWithProviders(<Header />);

      const header = screen.getByRole('banner');

      // Ê®°ÊãüÊªöÂä®
      Object.defineProperty(window, 'scrollY', { value: 100 });
      fireEvent.scroll(window);

      await waitFor(() => {
        expect(header).toHaveClass('shadow-md'); // ÊªöÂä®Êó∂ÁöÑÈò¥ÂΩ±
      });
    });

    it('Â∫îËØ•ÊîØÊåÅÂ§¥ÈÉ®Ëá™Âä®ÈöêËóèÔºàÂêë‰∏ãÊªöÂä®Êó∂Ôºâ', async () => {
      renderWithProviders(<Header autoHide />);

      const header = screen.getByRole('banner');

      // Ê®°ÊãüÂêë‰∏ãÊªöÂä®
      let scrollY = 0;
      Object.defineProperty(window, 'scrollY', {
        get: () => scrollY,
        configurable: true
      });

      // Âø´ÈÄüÂêë‰∏ãÊªöÂä®
      scrollY = 200;
      fireEvent.scroll(window);

      await waitFor(() => {
        expect(header).toHaveClass('-translate-y-full'); // Â§¥ÈÉ®ÈöêËóè
      });

      // Âêë‰∏äÊªöÂä®
      scrollY = 150;
      fireEvent.scroll(window);

      await waitFor(() => {
        expect(header).not.toHaveClass('-translate-y-full'); // Â§¥ÈÉ®ÊòæÁ§∫
      });
    });
  });

  describe('ÂèØËÆøÈóÆÊÄß', () => {
    it('Â∫îËØ•ÊúâÊ≠£Á°ÆÁöÑËØ≠‰πâÁªìÊûÑ', () => {
      renderWithProviders(<Header />);

      expect(screen.getByRole('banner')).toBeInTheDocument();
      expect(screen.getByRole('navigation')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÈîÆÁõòÂØºËà™', () => {
      renderWithProviders(<Header />);

      const logo = screen.getByRole('link', { name: /Maple Blog/i });
      const _blogLink = screen.getByRole('link', { name: /ÂçöÂÆ¢/i });

      // TabÈîÆÂØºËà™
      logo.focus();
      expect(logo).toHaveFocus();

      fireEvent.keyDown(logo, { key: 'Tab' });
      // È™åËØÅÁÑ¶ÁÇπÁßªÂä®Âà∞‰∏ã‰∏Ä‰∏™ÂèØËÅöÁÑ¶ÂÖÉÁ¥†
    });

    it('Â∫îËØ•‰∏∫Ê±âÂ†°ËèúÂçïÊèê‰æõÊ≠£Á°ÆÁöÑARIAÊ†áÁ≠æ', () => {
      mockUseResponsive.mockReturnValue({
        isMobile: true,
        isTablet: false,
        isDesktop: false,
        viewportWidth: 375,
        breakpoint: 'sm',
        isTouchDevice: true
      });

      renderWithProviders(<Header />);

      const menuButton = screen.getByRole('button', { name: /ÊâìÂºÄËèúÂçï/i });
      expect(menuButton).toHaveAttribute('aria-expanded', 'false');

      fireEvent.click(menuButton);

      expect(menuButton).toHaveAttribute('aria-expanded', 'true');
    });

    it('Â∫îËØ•‰∏∫Áî®Êà∑ËèúÂçïÊèê‰æõÊ≠£Á°ÆÁöÑARIAÊ†áÁ≠æ', () => {
      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      const userMenuButton = screen.getByRole('button', { name: /Áî®Êà∑ËèúÂçï/i });
      expect(userMenuButton).toHaveAttribute('aria-haspopup', 'menu');
    });

    it('Â∫îËØ•ÊîØÊåÅESCÈîÆÂÖ≥Èó≠ËèúÂçï', async () => {
      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      const userMenuButton = screen.getByRole('button', { name: /Áî®Êà∑ËèúÂçï/i });
      fireEvent.click(userMenuButton);

      expect(screen.getByRole('menu')).toBeInTheDocument();

      // ÊåâESCÈîÆ
      fireEvent.keyDown(document, { key: 'Escape' });

      await waitFor(() => {
        expect(screen.queryByRole('menu')).not.toBeInTheDocument();
      });
    });

    it('Â∫îËØ•‰∏∫ÂõæÊ†áÊåâÈíÆÊèê‰æõÊèèËø∞ÊÄßÊ†áÁ≠æ', () => {
      renderWithProviders(<Header />);

      expect(screen.getByLabelText('ÂàáÊç¢‰∏ªÈ¢ò')).toBeInTheDocument();

      // Â¶ÇÊûúÊúâÊêúÁ¥¢ÂõæÊ†á
      if (screen.queryByLabelText('ÊêúÁ¥¢')) {
        expect(screen.getByLabelText('ÊêúÁ¥¢')).toBeInTheDocument();
      }
    });
  });

  describe('ÊÄßËÉΩ‰ºòÂåñ', () => {
    it('Â∫îËØ•Èò≤Ê≠¢È¢ëÁπÅÁöÑÊªöÂä®‰∫ã‰ª∂Ëß¶Âèë', async () => {
      const _scrollHandler = vi.fn();

      renderWithProviders(<Header />);

      // Ê®°ÊãüÂø´ÈÄüÊªöÂä®‰∫ã‰ª∂
      for (let i = 0; i < 10; i++) {
        fireEvent.scroll(window);
      }

      // Áî±‰∫éÈò≤ÊäñÔºåÂ§ÑÁêÜÂáΩÊï∞Â∫îËØ•Ë¢´Ë∞ÉÁî®Ê¨°Êï∞ËæÉÂ∞ë
      await waitFor(() => {
        // È™åËØÅÈò≤ÊäñÈÄªËæë
      });
    });

    it('Â∫îËØ•Âª∂ËøüÂä†ËΩΩÁî®Êà∑Â§¥ÂÉè', () => {
      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      const avatar = screen.getByAltText('ÊµãËØïÁî®Êà∑');
      expect(avatar).toHaveAttribute('loading', 'lazy');
    });
  });

  describe('ÈîôËØØÂ§ÑÁêÜ', () => {
    it('Â∫îËØ•Â§ÑÁêÜËÆ§ËØÅÂä†ËΩΩÁä∂ÊÄÅ', () => {
      mockUseAuth.mockReturnValue({
        user: null,
        isAuthenticated: false,
        login: vi.fn(),
        logout: vi.fn(),
        loading: true
      });

      renderWithProviders(<Header />);

      // Âä†ËΩΩÁä∂ÊÄÅÊó∂Â∫îÊòæÁ§∫È™®Êû∂Â±èÊàñÂä†ËΩΩÊåáÁ§∫Âô®
      expect(screen.getByTestId('user-menu-skeleton')).toBeInTheDocument();
    });

    it('Â∫îËØ•Â§ÑÁêÜÁî®Êà∑Â§¥ÂÉèÂä†ËΩΩÂ§±Ë¥•', async () => {
      mockUseAuth.mockReturnValue({
        user: mockUser,
        isAuthenticated: true,
        login: vi.fn(),
        logout: vi.fn(),
        loading: false
      });

      renderWithProviders(<Header />);

      const avatar = screen.getByAltText('ÊµãËØïÁî®Êà∑') as HTMLImageElement;

      // Ê®°ÊãüÂõæÁâáÂä†ËΩΩÂ§±Ë¥•
      fireEvent.error(avatar);

      await waitFor(() => {
        expect(avatar.src).toContain('default-avatar'); // ÈªòËÆ§Â§¥ÂÉè
      });
    });

    it('Â∫îËØ•Â§ÑÁêÜÁΩëÁªúÈîôËØØÊó∂ÁöÑ‰ºòÈõÖÈôçÁ∫ß', () => {
      // MockÁΩëÁªúÈîôËØØÊÉÖÂÜµ‰∏ãÁöÑÁªÑ‰ª∂Ë°å‰∏∫
      renderWithProviders(<Header />);

      // ÁªÑ‰ª∂Â∫îËØ•‰ªçÁÑ∂ÂèØ‰ª•Ê≠£Â∏∏Ê∏≤ÊüìÂíå‰∫§‰∫í
      expect(screen.getByRole('banner')).toBeInTheDocument();
    });
  });
});